# -*- coding: utf-8 -*-
"""63606077-สอบ.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g_3kUi2BwVqcjXbB8sLjB0E16M5TX4C1
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

df_data = pd.read_csv('/content/drive/MyDrive/MLCS/world-happiness-report-2021.csv')

df_data.head()

# 2 จากข้อมูลดังกล่าว ให้สร้าง column ใหม่ โดยค่าของ column ใหม่ คำนวนตามคะแนนความสุข (life ladder) (10 คะแนน)
# ดังนี้

# กลุ่มไม่มีความสุข (unhappiness) คือกลุ่มที่มีคะแนน life ladderอยู่ใน quatile ที่ 1
# กลุ่มมีความสุขปานกลาง (middle) คือกลุ่มที่มีคะแนน life ladderอยู่ใน quatile ที่ 2 และ 3
# กลุ่มมีความสุขมาก (้happiest) คือกลุ่มที่มีคะแนน life ladderอยู่ใน quatile ที่ 4

df_data.info()

df_data = df_data.fillna(method="ffill",)
df_data.info()

pd.qcut(df_data["Ladder score"],q=4,)

columns  = ['unhappiness', 'middle', 'happiest']
df_data["life ladder"] = pd.qcut(df_data["Ladder score"]
                           , q=[0, 1/4, 2/4, 1]
                           , labels = columns)

df_data

df_data["life ladder"].describe()

# 3 ให้ใช้หลักการของการทำ Clustering มาอธิบายถึงลักษณะของประเทศที่มีไม่มีความสุข (10 คะแนน)

import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
import plotly as py
import plotly.graph_objs as go
py.offline.init_notebook_mode(connected = True)

df_dataunhap = df_data[df_data["life ladder"] == "unhappiness"]

df_dataunhap.head()

X1 = df_dataunhap[['Logged GDP per capita' , 'Social support' ,'Freedom to make life choices']].iloc[: , :].values

inertia = []
for n in range(1 , 11):
    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300,
                        tol=0.0001,  random_state= 111  , algorithm='elkan') )
    algorithm.fit(X1)
    inertia.append(algorithm.inertia_)

plt.figure(1 , figsize = (10 ,6))
plt.plot(np.arange(1 , 11) , inertia , 'o')
plt.plot(np.arange(1 , 11) , inertia , '-' , alpha = 0.5)
plt.xlabel('Number of Clusters') , plt.ylabel('Inertia')
plt.show()

# Number of Clusters = 3

kmeans = (KMeans(n_clusters = 3 ,init='k-means++', n_init = 10 ,max_iter=300,
                        tol=0.0001,  random_state= 111  , algorithm='elkan') )
kmeans.fit(X1)
labels = kmeans.labels_
centroids = kmeans.cluster_centers_

# labels

# 'Healthy life expectancy' , 'Social support' ,'Freedom to make life choices'

df_dataunhap['label'] =  labels
trace1 = go.Scatter3d(
    x= df_dataunhap['Logged GDP per capita'],
    # x= df_dataunhap['Healthy life expectancy'],
    y= df_dataunhap['Social support'],
    z= df_dataunhap['Freedom to make life choices'],
    mode='markers',
     marker=dict(
        color = df_dataunhap['label'],
        size= 20,
        line=dict(
            color= df_dataunhap['label'],
            width= 12
        ),
        opacity=0.8
     )
)
data = [trace1]
layout = go.Layout(
    margin=dict(
        l=0,
        r=0,
        b=0,
        t=0
    ),
    width=640,
    height=640,
    title= 'Clusters',
    scene = dict(
            xaxis = dict(title  = 'Logged GDP per capita'),
            # xaxis = dict(title  = 'Healthy life expectancy'),
            yaxis = dict(title  = 'Social support'),
            zaxis = dict(title  = 'Freedom to make life choices')
        )
)
fig = go.Figure(data=data, layout=layout)

def configure_plotly_browser_state():
  import IPython
  display(IPython.core.display.HTML('''
        <script src="/static/components/requirejs/require.js"></script>
        <script>
          requirejs.config({
            paths: {
              base: '/static/base',
              plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext',
            },
          });
        </script>
  '''))

configure_plotly_browser_state()
py.offline.iplot(fig)

# สรุป ลักษณะของประเทศที่มีไม่มีความสุข
# 1.กลุ่มสีน้ำเงิน คะแนนสวัสดิการสังคมน้อย GPD น้อย มีอิสระการใช้ชีวิตปานกลาง

# 2.กลุ่มสีแดง คะแนนสวัสดิการสังคมปานกลาง GDP ปานกลาง มีอิสระการใช้ชีวิตปานกลาง

# 3.กลุ่มสีเหลือง คะแนนสวัสดิการสังคมสูง GDP สูง มีอิสระการใช้ชีวิตปานกลาง

# 4 ให้ใช้หลักการของการทำ classification มาอธิบายถึงลักษณะของประเทศที่มีความสุขมาก (10 คะแนน)

df_datahappi = df_data[df_data["life ladder"] == "happiest"]

df_datahappi.head()

X2 = df_datahappi[['Logged GDP per capita' , 'Social support' ,'Freedom to make life choices']].iloc[: , :].values

inertia = []
for n in range(1 , 11):
    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300,
                        tol=0.0001,  random_state= 111  , algorithm='elkan') )
    algorithm.fit(X2)
    inertia.append(algorithm.inertia_)

plt.figure(1 , figsize = (10 ,6))
plt.plot(np.arange(1 , 11) , inertia , 'o')
plt.plot(np.arange(1 , 11) , inertia , '-' , alpha = 0.5)
plt.xlabel('Number of Clusters') , plt.ylabel('Inertia')
plt.show()

kmeans = (KMeans(n_clusters = 3 ,init='k-means++', n_init = 10 ,max_iter=200,
                        tol=0.0001,  random_state= 111  , algorithm='elkan') )
kmeans.fit(X2)
labels = kmeans.labels_
centroids = kmeans.cluster_centers_

# labels

configure_plotly_browser_state()
py.offline.iplot(fig)

# สรุป ลักษณะของประเทศที่มีความสุขมาก
# 1.กลุ่มสีน้ำเงิน คะแนนสวัสดิการสังคมปานกลาง GPD ปานกลาง มีอิสระการใช้ชีวิตปานกลาง

# 2.กลุ่มสีแดง คะแนนสวัสดิการสังคมสูง GDP สูง มีอิสระการใช้ชีวิตปานกลาง

# 3.กลุ่มสีเหลือง คะแนนสวัสดิการสังคมสูงมาก GDP สูงมาก มีอิสระการใช้ชีวิตปานกลาง

# 5 ให้ว่า ประเทศ ในไฟล์ world-happiness-test.csv มีคะแนนความสุขเป็นอย่างไร (10 คะแนน)

df2 = pd.read_csv('/content/drive/MyDrive/MLCS/world-happiness-report-2021.csv')
df2.head()

data_columns = ['Country name' , 'Regional indicator' , 'Ladder score', 'Logged GDP per capita', 'Social support' ,  'Healthy life expectancy' , 'Freedom to make life choices' , 'Generosity' , 'Perceptions of corruption']

df = df[data_columns].copy()

from matplotlib import axes
happy_df = df.rename({'Country name' : 'country_name' , 'Regional indicator' : 'regional_indicator' , 'Ladder score' : 'ladder_score' , 'Logged GDP per capita' : 'logged_GDP_per_capita' , 'Social support' : 'social_support' , 'Healthy life expectancy' : 'healthy_life_expectancy' , 'Freedom to make life choices' : 'freedom_to_make_life_choices' , 'Generosity' : 'generosity' , 'Perceptions of corruption' : 'perceptions_of_corruption' }, axis =1)

happy_df.isnull().sum()

print(happy_df)

"""## Happiest Countries
What are the 20 happiest countries
"""

top_10 = happy_df.head(20)
bottom_10 = happy_df.tail(20)

fig, axes = plt.subplots(1,2, figsize= (15,6))
plt.tight_layout(pad=2)
xlabels = top_10.country_name
axes[0].set_title('Top 10 Social support countries ')
axes[0].set_xticklabels(xlabels, rotation=45, ha='right')
sns.barplot(x= top_10.country_name, y=top_10.social_support, ax=axes[0])

axes[0].set_xlabel('Cuntry Name')
axes[0].set_ylabel('Social support')

xlabels = bottom_10.country_name
axes[1].set_title('Bottom 10 Social support countries ')
axes[1].set_xticklabels(xlabels, rotation=45, ha='right')
sns.barplot(x= bottom_10.country_name, y=bottom_10.social_support, ax=axes[1])

axes[1].set_xlabel('Cuntry Name')
axes[1].set_ylabel('Social support')

avg_happy = happy_df.groupby('regional_indicator')['ladder_score'].mean()

avg_happy

happy_df.groupby('ladder_score').agg(['mean', 'median'])

happy_df.sort_values(by='regional_indicator', ascending=True)